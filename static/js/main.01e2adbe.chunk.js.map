{"version":3,"sources":["Store.js","Dashboard.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["socket","CTX","React","createContext","initState","General","from","msg","Programming","reducer","state","action","payload","topic","type","sendChatAction","value","emit","Store","props","useReducer","allChats","dispatch","io","on","user","Math","random","toFixed","Provider","children","useStyles","makeStyles","theme","root","margin","padding","spacing","flex","display","alignItems","topicsWindow","width","height","borderRight","background","chatWindow","chatBox","button","Dashboard","classes","useContext","topics","Object","keys","useState","activeTopic","textValue","changeTextValue","Paper","className","Typography","variant","component","List","map","chat","i","key","Chip","label","variants","gutterBottom","TextField","id","onChange","e","target","Button","color","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.01e2adbe.chunk.js","sourcesContent":["import React from 'react';\r\nimport io from 'socket.io-client'\r\n\r\nexport const CTX = React.createContext();\r\n\r\nexport const RECEIVE_MESSAGE = \"RECEIVE_MESSAGE\"\r\n\r\nconst initState = {\r\n  General: [\r\n    {from: 'user01', msg: 'Yo Welcome to Shlack Chat'},\r\n    {from: 'user45', msg: 'Yo'},\r\n    {from: 'user80', msg: 'Hulllo'}\r\n\r\n  ],\r\n  Programming:[\r\n    {from: 'user45', msg: 'whats a string?'},\r\n    {from: 'user57', msg: 'are u serious'},\r\n    {from: 'user90', msg: 'in what language are u asking?'}\r\n  ]\r\n}\r\nfunction reducer(state, action){\r\n\r\n  const {from, msg, topic} = action.payload;\r\n  switch(action.type){\r\n    case RECEIVE_MESSAGE:\r\n\r\n      return{\r\n        ...state,\r\n        [topic]:[...state[topic],{from,msg}]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nlet socket;\r\n\r\nfunction sendChatAction(value){\r\n  socket.emit('chat message', value);\r\n}\r\n\r\nconst Store = props =>{\r\n  const [allChats, dispatch] = React.useReducer(reducer, initState);\r\n  //const [allChats] = React.useReducer(reducer, initState);\r\n  if(!socket){\r\n    socket = io(':3001')\r\n    socket.on('chat message', function(msg){\r\n      //console.log({msg});\r\n\r\n      dispatch({ type:RECEIVE_MESSAGE, payload: msg });\r\n    });\r\n  }\r\n\r\n  const user = 'user' + Math.random(100).toFixed(2)*100\r\n\r\n\r\n\r\n  return(\r\n    <CTX.Provider value={{allChats, sendChatAction, user}}>\r\n      {props.children}\r\n    </CTX.Provider>\r\n  );\r\n};\r\n\r\nexport default Store;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport {CTX} from './Store';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  // makestyles render css when page renders\r\n  root: {\r\n\r\n    // separation\r\n    margin: '30px',\r\n    padding: theme.spacing(3,2),\r\n  },\r\n\r\n  flex:{\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n\r\n  topicsWindow:{\r\n    width: '30%',\r\n    height: '300px',\r\n    borderRight: '2.5px solid black',\r\n    background: 'grey'\r\n  },\r\n  chatWindow:{\r\n    width: '70%',\r\n    height: '300px',\r\n    padding: '20px'\r\n  },\r\n  chatBox:{\r\n    width: '85%'\r\n  },\r\n  button:{\r\n    width: '15%'\r\n  }\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const classes = useStyles();\r\n\r\n  const {allChats, sendChatAction, user}= React.useContext(CTX);\r\n\r\n  const topics = Object.keys(allChats);\r\n\r\n  //local state\r\n  const [activeTopic, changeActiveTopic] = React.useState(topics[0])\r\n  const [textValue, changeTextValue] = React.useState('');\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n\r\n        <Typography variant=\"h3\" component=\"h3\">\r\n        Shlack\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h5\">\r\n        {activeTopic}\r\n        </Typography>\r\n\r\n        <div className = {classes.flex}>\r\n\r\n          <div className= {classes.topicsWindow}>\r\n            <List>\r\n              {\r\n                topics.map(topic => (\r\n                  // the onclick below changes the desc below shlack\r\n                  <ListItem onClick={(e) => changeActiveTopic(e.target.innerText)} key = {topic} button>\r\n\r\n                    <ListItemText primary={topic} />\r\n                  </ListItem>\r\n                ))\r\n              }\r\n            </List>\r\n          </div>\r\n          <div className= {classes.chatWindow}>\r\n            {\r\n              allChats[activeTopic].map((chat, i) => (\r\n                <div className={classes.flex} key={i}>\r\n                  <Chip label={chat.from}  />\r\n                  <Typography variants='body1' gutterBottom>\r\n                  {chat.msg}\r\n                  </Typography>\r\n                </div>\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <div className = {classes.flex}>\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"Type Here..\"\r\n          variant=\"outlined\"\r\n          className={classes.chatBox}\r\n          value = {textValue}\r\n          onChange = {(e) => changeTextValue(e.target.value)}\r\n        />\r\n        <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick = {() => {\r\n          sendChatAction({from: user,msg: textValue, topic: activeTopic});\r\n          changeTextValue(' ');\r\n        }}\r\n        >\r\n          Send\r\n        </Button>\r\n\r\n        </div>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Dashboard from './Dashboard';\nimport Store from './Store';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Store>\n        <Dashboard />\n      </Store>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}